// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Couponcode {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId //merging prisma id with mongo db id generated
  couponSlug      String   @unique
  title       String
  discount    Int
  expiryDate  DateTime
   createdAt   DateTime  @default(now()) // Automatically set createdAt when a record is created
  updatedAt   DateTime  @updatedAt      // Automatically update updatedAt when a record is modified
}



// Define the Category model
model Category {
  // MongoDB ObjectId for the category ID
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  imageURL    String
  slug        String      @unique
  description String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // One-to-many relation with Products (if applicable)
  products    Product[]  
}

// Define the Products model
model Product {
  // MongoDB ObjectId for the product ID
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl     String?
  slug         String      @unique
  title        String
 tags         String[]
productImages String[]
 Origninalprice Float
 Discountedprice Float
 qty              Int
 stock          Int
  description  String
  
  categoryId   String    @db.ObjectId
   createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Define an array field to store tags as strings
  

  // One-to-many relation with Category (if applicable)
  
  category     Category?    @relation(fields: [categoryId], references: [id], onDelete:Cascade, onUpdate:Cascade)
  //a product has many review
  reviews Reviews[]
}

model Staff{
   id           String      @id @default(auto()) @map("_id") @db.ObjectId
  FirstName String
  LastName   String
  StaffDate    String
   StaffDepartment  String
   StaffRole    String
  imageURL    String?
  password String
  staffId  String  @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
model Banners{
   id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  imageURL    String
  isActive  Boolean
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
model Reviews {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  customer_name String
  review String
  ratings Int
  productId String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  //reviews belong to a product
   product     Product?    @relation(fields: [productId], references: [id],onDelete:Cascade, onUpdate:Cascade)
}
model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId //merging prisma id with mongo db id generated
  firstName    String   
  lastName    String
  email    String  @unique
  password String
  phone String?
  address String?
  country String?
  city String?
  state String?
  isAdmin    Boolean
   createdAt   DateTime  @default(now()) // Automatically set createdAt when a record is created
  updatedAt   DateTime  @updatedAt 
  wishlist  String[]
  orders  Orders[]     // Automatically update updatedAt when a record is modified
}

enum OrderStatus {
  PROCESSING
  SUCCESS
  FAILED
  PENDING
}
model Orders{
   id          String   @id @default(auto()) @map("_id") @db.ObjectId
   product OrderProduct[]
    email    String  
    firstName String
    lastName String
  phone String
  address String
 
  city String
  state String
  userId String  @db.ObjectId
  status      OrderStatus  @default(PROCESSING)
 totalPrice Float

 amountPaid Float?
 createdAt   DateTime  @default(now()) // Automatically set createdAt when a record is created
  updatedAt   DateTime  @updatedAt 

  // One-to-many relation with Category (if applicable)
  
  user    User?    @relation(fields: [userId], references: [id], onDelete:Cascade, onUpdate:Cascade)

}
//define product type that will be passed into the order model as objects in an array
type OrderProduct {
   id String
   imageUrl String
  qty Int
  Discountedprice Float
  title String
}



